* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	font-family: 'Montserrat', sans-serif;
	background-color: #333;
	font-size: 36px;
	color: #fff;
}

.bg {
	width: 100vw;
	height: 100vh;
	background-color: #ddd;
    transition: background-color 1s;
}

.square {
    position: absolute;
	width: 60px;
	height: 60px;
	border: 3px solid black;
	top: 50px;
	transform: translateX(-50%);
    cursor: pointer;
}

.red {
	background-color: tomato;
	left: 20%;
}

.red:hover ~ .bg{
	background-color: tomato;
}

.blue {
	background-color: royalblue;
	left: 40%;
}

.blue:hover ~ .bg{
	background-color: royalblue;
}

.green {
	background-color: greenyellow;
	left: 60%;
}

.green:hover ~ .bg {
	background-color: greenyellow;
}

.gold {
	background-color: gold;
	left: 80%;
}

.gold:hover ~ .bg {
	background-color: gold;
}

/* UÅ‚Ã³Å¼ kwadraty.
KaÅ¼dy kwadrat bÄ™dzie miaÅ‚ takÄ… samÄ… odlegÅ‚oÅ›Ä‡ od TOP, wiÄ™c moÅ¼na zaoszczÄ™dziÄ‡ kilka linijek kodu. ğŸ˜‰

Aby uÅ‚oÅ¼yÄ‡ kwadraty obok siebie, moÅ¼esz kombinowaÄ‡ z pikselami, ale sprÃ³buj uÅ¼yÄ‡ %, dziÄ™ki czemu odlegÅ‚oÅ›ci bÄ™dÄ… automatycznie wyliczane.

JeÅ›li uda Ci siÄ™ uÅ‚oÅ¼yÄ‡ je za pomocÄ… %, odkomentuj "transform: translateX(-50%);" w .square.

Spokojnie â€“ w kolejnym odcinku wytÅ‚umaczÄ™, o co chodzi z tÄ… wÅ‚aÅ›ciwoÅ›ciÄ…. ğŸ˜‰

Kiedy kwadraty bÄ™dÄ… na swoich miejscach, zmieÅ„ kursor na "Å‚apkÄ™" (domyÅ›lnie bÄ™dzie strzaÅ‚ka).

Przeanalizuj strukturÄ™ w HTML i za pomocÄ… kombinatorÃ³w (a raczej jednego) zrÃ³b tak, aby po najechaniu na dany kwadrat, tÅ‚o strony zmieniaÅ‚o siÄ™ na jego kolor.
PamiÄ™taj o pseudoklasie, ktÃ³ra odpowiada za najechanie. ğŸ˜‰
UÅ¼ywaliÅ›my jej w odcinku o stylowaniu przyciskÃ³w.

PodpowiedÅº: zastanÃ³w siÄ™ jakby to miaÅ‚o dziaÅ‚aÄ‡, jaka tu ma byÄ‡ logika.
Co ma siÄ™ staÄ‡, Å¼eby coÅ› siÄ™ zadziaÅ‚o?

Kiedy kolor tÅ‚a bÄ™dzie siÄ™ zmieniaÅ‚, sprÃ³buj nadaÄ‡ "transition", aby animacja byÅ‚a pÅ‚ynna.

PodpowiedÅº: transition nadajemy na elemencie, ktÃ³ry jest animowany! */
